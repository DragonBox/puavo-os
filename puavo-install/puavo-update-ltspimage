#!/bin/sh

next_image=$1

set -eu

# XXX somewhat duplicate code with build_rdiffs.sh
get_rdiff_filename() {
  previous_image_name=$1
  next_image_name=$2

  echo "$previous_image_name $next_image_name" \
    | awk '{
	orig   = $1
	target = $2
	regex  = "^(.*?)-([0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6})-(.*?).img$"
   
	if (match(orig, regex, orig_match) \
	  && match(target, regex, target_match)) {
	    printf("%s-%s--%s-%s.rdiff\n",
		   orig_match[1],
		   orig_match[2],
		   target_match[2],
		   orig_match[3])
	}
      }'
}

# XXX duplicate code with puavo-install-ltspimages
lookup_current_ltspimage_name() {
  images_dir=$1

  current_ltspimage_path=$images_dir/ltsp.img
  current_ltspimage_inode="$(stat -c %i $current_ltspimage_path 2>/dev/null || true)"

  for file in $images_dir/*.img; do
    # check that *.img expands to something
    test -e "$file" || continue

    # ltsp.img is not what we are looking for
    test "$file" = "$current_ltspimage_path" && continue

    # we want its other name...
    if [ "$(stat -c %i "$file" || true)" = "$current_ltspimage_inode" ]; then
      echo "$(basename "$file")"
      break
    fi
  done
}

# XXX duplicate code with puavo-install-ltspimages
set_image_as_default_image() {
  images_dir=$1
  imagename=$2
  imagepath=$images_dir/$imagename

  backup_ltspimage_path=$images_dir/ltsp-backup.img
  default_ltspimage_path=$images_dir/ltsp.img

  ln -f "$default_ltspimage_path" "$backup_ltspimage_path" 2>/dev/null || true
  ln -f "$imagepath" "${default_ltspimage_path}.tmp"
  sync
  mv "${default_ltspimage_path}.tmp" "$default_ltspimage_path"
  sync
}

if [ -z "$next_image" ]; then
  echo "Usage: $(basename $0) next_ltsp_image_name" > /dev/stderr
  exit 1
fi

images_dir=/images
previous_image=$(lookup_current_ltspimage_name $images_dir)

if [ -e "${image_dir}/${next_image}" ]; then
  echo "The requested image is already in place"
  exit 0
fi

# XXX should use dns to look this up
# image_server=$(dig it)

if [ -z "$image_server" ]; then
  echo "Could not find image server from dns" > /dev/stderr
  exit 1
fi

rdiffs_dir=${images_dir}/rdiffs
mkdir -p $rdiffs_dir

rdiff_filename=$(get_rdiff_filename $previous_image $next_image)

# clean up previous interrupted runs
# XXX should also remove images which simply take space and are not needed
rm -f ${images_dir}/*.tmp ${rdiffs_dir}/*.tmp

# rate_limit_opts="--limit-rate 50k"
rate_limit_opts=""

curl --cacert /etc/puavo/certs/rootca.pem \
     --fail \
     $rate_limit_opts \
     --output ${rdiffs_dir}/${rdiff_filename}.tmp \
     https://${image_server}/images/rdiffs/${rdiff_filename}
mv ${rdiffs_dir}/${rdiff_filename}.tmp ${rdiffs_dir}/${rdiff_filename}

ionice -c 3 nice -n 20 \
  rdiff patch ${images_dir}/$previous_image \
	      ${rdiffs_dir}/${rdiff_filename} \
              ${images_dir}/${next_image}.tmp
mv ${images_dir}/${next_image}.tmp ${images_dir}/${next_image}

set_image_as_default_image $images_dir $next_image
