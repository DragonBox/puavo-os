#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2016 Opinsys Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import sys

from PyQt5.QtCore    import *
from PyQt5.QtGui     import *
from PyQt5.QtWidgets import *

import puavo.blackboard.icons

def penWidthIcon(width):
    pixmap = QPixmap(16, 16)
    painter = QPainter(pixmap)
    painter.setRenderHint(QPainter.Antialiasing)
    painter.setPen(Qt.NoPen)
    painter.setBrush(Qt.white)
    painter.drawRect(0, 0, 16, 16)
    painter.setBrush(Qt.black)
    x = y = (16 - width) / 2
    painter.drawEllipse(x, y, width, width)
    painter.end()

    return QIcon(pixmap)

def colorIcon(colorName):
    pixmap = QPixmap(16, 16)
    painter = QPainter(pixmap)
    painter.setPen(Qt.NoPen)
    painter.setBrush(QColor(colorName))
    painter.drawRect(0, 0, 16, 16)
    painter.end()

    return QIcon(pixmap)

class LineTool:

    def __init__(self):
        self.__line  = None
        self.__canvas = None

    def start(self, canvas, pos, pen):
        if self.__canvas is not None:
            return False

        self.__line = QGraphicsLineItem()
        self.__line.setPen(pen)
        self.__line.setPos(pos)
        canvas.addItem(self.__line)
        self.__canvas = canvas

        return True

    def move(self, pos):
        if self.__canvas is None:
            return False

        self.__line.setLine(0, 0,
                            pos.x() - self.__line.pos().x(),
                            pos.y() - self.__line.pos().y())

        return True

    def stop(self, pos):
        if self.__canvas is None:
            return False

        self.__line  = None
        self.__canvas = None

        return True

class FreehandTool:

    def __init__(self):
        self.__path  = None
        self.__canvas = None

    def start(self, canvas, pos, pen):
        if self.__canvas is not None:
            return False

        self.__canvas = canvas

        self.__path = QGraphicsPathItem()
        self.__path.setPen(pen)
        painterPath = QPainterPath()
        painterPath.moveTo(pos)
        self.__path.setPath(painterPath)
        canvas.addItem(self.__path)
        self.__canvas = canvas

        return True

    def move(self, pos):
        if self.__canvas is None:
            return False

        painterPath = self.__path.path()
        painterPath.lineTo(pos)
        self.__path.setPath(painterPath)

        return True

    def stop(self, pos):
        self.__path  = None
        self.__canvas = None

class Artist:

    TOOL_LINE     = LineTool()
    TOOL_FREEHAND = FreehandTool()

    def __init__(self):
        self.__tool = None
        self.__pen  = QPen(Qt.white, 5, Qt.SolidLine, Qt.RoundCap)

    def setPenColor(self, colorName):
        self.__pen.setColor(QColor(colorName))

    def setPenWidth(self, width):
        self.__pen.setWidth(width)

    def setTool(self, tool):
        self.__tool = tool

    def start(self, canvas, pos):
        self.__tool.start(canvas, pos, self.__pen)

    def move(self, pos):
        self.__tool.move(pos)

    def stop(self, pos):
        self.__tool.stop(pos)

class Canvas(QGraphicsScene):

    def __init__(self, *args):
        super().__init__(*args)

        self.__artist = None
        self.setBackgroundBrush(QBrush(QColor(27, 51, 40), Qt.SolidPattern))

    def mousePressEvent(self, event):
        if self.__artist is not None:
            self.__artist.start(self, event.scenePos())

        super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        if self.__artist is not None:
            self.__artist.move(event.scenePos())

        super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        if self.__artist is not None:
            self.__artist.stop(event.scenePos())

        super().mouseReleaseEvent(event)

    def setArtist(self, artist):
        self.__artist = artist

class MainWindow(QMainWindow):

    def __init__(self, *args):
        super().__init__(*args)

        self.__artist = Artist()
        self.__canvas = Canvas(0, 0, 1920, 1080, self)
        self.__canvas.setArtist(self.__artist)
        view = QGraphicsView(self.__canvas)
        view.setRenderHints(QPainter.Antialiasing)
        self.setCentralWidget(view)

        self.__toolBar = QToolBar("Tools")
        self.addToolBar(Qt.BottomToolBarArea, self.__toolBar)

        self.__clearAction = self.__toolBar.addAction("Clear")
        self.__toolBar.addSeparator()
        self.__lineAction = self.__toolBar.addAction(
            QIcon(":icons/line.svg"), "Line")
        self.__freehandAction = self.__toolBar.addAction(
            QIcon(":icons/freehand.svg"), "Freehand")

        self.__clearAction.triggered.connect(self.__canvas.clear)
        self.__lineAction.toggled.connect(
            lambda: self.__artist.setTool(Artist.TOOL_LINE))
        self.__freehandAction.toggled.connect(
            lambda: self.__artist.setTool(Artist.TOOL_FREEHAND))

        self.__toolActionGroup = QActionGroup(self)
        self.__toolActionGroup.setExclusive(True)
        self.__toolActionGroup.addAction(self.__lineAction)
        self.__toolActionGroup.addAction(self.__freehandAction)

        self.__lineAction.setCheckable(True)

        self.__freehandAction.setCheckable(True)
        self.__freehandAction.setChecked(True)

        self.__colorActionGroup = QActionGroup(self)
        self.__colorActionGroup.setExclusive(True)

        self.__toolBar.addSeparator()

        colorSignalMapper = QSignalMapper(self)
        for colorName in ("black", "maroon", "green", "olive",
                          "navy", "purple", "teal", "silver",
                          "gray", "red", "lime", "yellow",
                          "blue", "fuchsia", "aqua", "white"):
            colorAction = self.__colorActionGroup.addAction(colorIcon(colorName),
                                                            colorName.capitalize())
            colorAction.setCheckable(True)
            colorAction.toggled.connect(colorSignalMapper.map)
            colorSignalMapper.setMapping(colorAction, colorName)
            self.__toolBar.addAction(colorAction)
        colorSignalMapper.mapped[str].connect(self.__artist.setPenColor)
        colorAction.setChecked(True)

        self.__penWidthActionGroup = QActionGroup(self)
        self.__penWidthActionGroup.setExclusive(True)

        self.__toolBar.addSeparator()

        penWidthSignalMapper = QSignalMapper(self)
        for penWidth in (2, 5, 8, 11, 14):
            penWidthAction = self.__penWidthActionGroup.addAction(penWidthIcon(penWidth),
                                                                  str(penWidth).capitalize())
            penWidthAction.setCheckable(True)
            penWidthAction.toggled.connect(penWidthSignalMapper.map)
            penWidthSignalMapper.setMapping(penWidthAction, penWidth)
            self.__toolBar.addAction(penWidthAction)
        penWidthSignalMapper.mapped[int].connect(self.__artist.setPenWidth)
        penWidthAction.setChecked(True)

def main():
    if len(sys.argv) - 1 != 0:
        print("error: invalid number of arguments (%d), expected 0"
              % (len(sys.argv) - 1), file=sys.stderr)
        return 1

    app = QApplication(sys.argv)
    win = MainWindow()
    win.setWindowTitle("Blackboard")

    win.show()

    return app.exec_()

if __name__ == "__main__":
    sys.exit(main())
