#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2016 Opinsys Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import sys

from PyQt5.QtCore    import *
from PyQt5.QtGui     import *
from PyQt5.QtWidgets import *

class Canvas(QGraphicsScene):

    TOOL_LINE = 1

    def __init__(self, *args):
        super().__init__(*args)

        self.__line = None
        self.__tool = Canvas.TOOL_LINE
        self.setBackgroundBrush(QBrush(QColor(27, 51, 40), Qt.SolidPattern))

    def mousePressEvent(self, event):
        if self.__line is None:
            self.__line = QGraphicsLineItem()
            self.__line.setPen(QPen(Qt.white, 1, Qt.SolidLine))
            self.__line.setPos(event.scenePos())
            self.addItem(self.__line)
        super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        if self.__line is None:
            super().mouseMoveEvent(event)
            return

        self.__line.setLine(0, 0,
                            event.scenePos().x() - self.__line.pos().x(),
                            event.scenePos().y() - self.__line.pos().y())

    def mouseReleaseEvent(self, event):
        self.__line = None
        super().mouseReleaseEvent(event)

    def setTool(self, tool):
        self.__tool = tool

class MainWindow(QMainWindow):

    def __init__(self, *args):
        super().__init__(*args)

        self.__canvas = Canvas(0, 0, 640, 480, self)
        self.__canvasView = QGraphicsView(self.__canvas)
        self.__canvasView.setRenderHints(QPainter.Antialiasing)

        self.__penActionGroup = QActionGroup(self)
        self.__penActionGroup.setExclusive(True)

        self.__toolBar = QToolBar("Tools")
        self.__clearAction = self.__toolBar.addAction("Clear")
        self.__clearAction.triggered.connect(self.__canvas.clear)

        self.__lineAction = self.__toolBar.addAction("Line")
        self.__lineAction.setActionGroup(self.__penActionGroup)
        self.__lineAction.setCheckable(True)
        self.__lineAction.setChecked(True)

        self.__lineAction.toggled.connect(
            lambda: self.__canvas.setTool(Canvas.TOOL_LINE))

        self.addToolBar(self.__toolBar)

        self.setCentralWidget(self.__canvasView)

def main():
    if len(sys.argv) - 1 != 0:
        print("error: invalid number of arguments (%d), expected 0"
              % (len(sys.argv) - 1), file=sys.stderr)
        return 1

    app = QApplication(sys.argv)
    win = MainWindow()
    win.setWindowTitle("Blackboard")

    win.show()

    return app.exec_()

if __name__ == "__main__":
    sys.exit(main())
