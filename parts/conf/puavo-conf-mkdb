#!/usr/bin/ruby

# Copyright (C) 2016 Opinsys Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'json'

require 'puavo/conf'

def validate_value(value)
    return true if value.kind_of?(String)
    raise "Value has unsupported type"
end

def validate_parameter_definition(obj)
    unless obj.kind_of?(Hash)
        raise "Parameter definition must be Hash"
    end
    %w(default).each do |required_key|
        unless obj.has_key?(required_key)
            raise "Required key '#{required_key}' is missing"
        end
    end
    validate_value(obj['default'])
    true
end

def read_json_obj(file, type)
    obj = JSON.parse(IO.read(file))
    unless obj.kind_of?(type)
        raise "Top-level JSON object of #{file} is not #{type}"
    end
    obj
end

def logwarn(msg)
    warn("Warning: #{msg}")
end

def logerr(msg)
    warn("Error: #{msg}")
    $status = 1
end

def get_parameter_definitions
    result      = {}
    globpattern = '/usr/share/puavo-conf/parameters/*.json'

    files = Dir.glob(globpattern) rescue []
    logwarn('No parameter definitions found') if files.empty?

    files.each do |file|
        begin
            parameter_definitions = read_json_obj(file, Hash)

            parameter_definitions.each do |key, parameter_definition|
                begin
                    validate_parameter_definition(parameter_definition)

                    if result.has_key?(key)
                        raise "Parameter #{key} is already defined"
                    end

                    result[key] = parameter_definition
                rescue StandardError => e
                    logerr("Invalid parameter definition for #{key}: #{e.message}")
                    next
                end
            end

        rescue StandardError => e
            logerr("Failed to read parameter definitions from #{file}: #{e.message}")
            next
        end
    end

    return result
end

## Main

$status = 0

puavoconf = Puavo::Conf.new()
begin
    parameter_definitions = get_parameter_definitions()

    parameter_definitions.each do |key, parameter|
        begin
            value = parameter.fetch('default')
            puavoconf.add(key, value)
        rescue StandardError => e
            logerr("Failed to add a new parameter: #{key}: #{e.message}")
            next
        end
    end
ensure
    puavoconf.close
end

exit($status)
