#!/usr/bin/ruby

# Copyright (C) 2016 Opinsys Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# for documentation see README.md
#

#
# tested speed on Lenovo ThinkCentre Edge (1578D7G)
#   with 100 hardware-quirks.json files, with 1000 pci-id keys on each:
#   took about 0.8 seconds (not to be taken as an exact value, code may
#   have changed)
#
# ways to optimize:
#   - rewrite in C
#   - have only a few json-files to parse
#   - replace calls for dmidecode, lspci, lsusb with something more efficient
#

require 'getoptlong'
require 'json'
require 'puavo/conf'

def apply_feature_profiles(features, feature_profiles, lookup_fn)
    if !feature_profiles.kind_of?(Array)
        logerr('input type error: feature profiles not in correct format')
        return
    end

    feature_profiles.each do |profile|
        if !(profile.kind_of?(Hash) \
               && profile['key'].kind_of?(String) \
               && profile['profile'].kind_of?(Hash)) then
            logerr('input type error: feature profile not in correct format')
            next
        end

        if profile['key'] == '*' then
            merge_features(features, profile['profile'])
            next
        end

        if !(profile['matchmethod'].kind_of?(String)) then
            logerr('input type error: feature profile not in correct format')
            next
        end

        feature_values = lookup_fn.call(profile['key'])
        next if feature_values.nil?

        feature_values.each do |value|
            match_result = match_puavopattern(value,
                                              profile['matchmethod'],
                                              profile['pattern'])
            if match_result then
                merge_features(features, profile['profile'])
                break
            end
        end
    end
end

$deviceinfo = {}
def get_device_setting(key)
    # returns nil in case there was a failure
    return $deviceinfo[key] if $deviceinfo.has_key?(key)

    case key
        when 'dmidecode-baseboard-asset-tag',
             'dmidecode-baseboard-manufacturer',
             'dmidecode-baseboard-product-name',
             'dmidecode-baseboard-serial-number',
             'dmidecode-baseboard-version',
             'dmidecode-bios-release-date',
             'dmidecode-bios-vendor',
             'dmidecode-bios-version',
             'dmidecode-chassis-asset-tag',
             'dmidecode-chassis-manufacturer',
             'dmidecode-chassis-serial-number',
             'dmidecode-chassis-type',
             'dmidecode-chassis-version',
             'dmidecode-processor-family',
             'dmidecode-processor-frequency',
             'dmidecode-processor-manufacturer',
             'dmidecode-processor-version',
             'dmidecode-system-manufacturer',
             'dmidecode-system-product-name',
             'dmidecode-system-serial-number',
             'dmidecode-system-uuid',
             'dmidecode-system-version'
                cmdarg = key[ "dmidecode-".length .. -1]
                result = %x(dmidecode -s #{ cmdarg })
                status = $?.exitstatus
                if status != 0 then
                    logerr("dmidecode -s #{ cmdarg } returned #{ status }")
                    $deviceinfo[key] = nil
                else
                    $deviceinfo[key] = [ result.strip ]
                end
        when 'pci-id'
            # might return nil, that is okay
            $deviceinfo[key] = take_field('lspci -n', 3)
        when 'usb-id'
            # might return nil, that is okay
            $deviceinfo[key] = take_field('lsusb', 6)
        else
            logerr("Unknown device key #{ key }")
            $deviceinfo[key] = nil
    end

    return $deviceinfo[key]
end

def logwarn(msg)
    warn(msg)
end

def logerr(msg)
    logwarn(msg)
    $status = 1
end

def match_puavopattern(target, matchmethod, pattern)
    # XXX if 'logic' matchmethod is going to be implemented
    # XXX pattern might not be a string?
    if !pattern.kind_of?(String) then
        logerr('input type error: match pattern is not a string')
        return
    end

    case matchmethod
        when 'exact'
            return target == pattern
        when 'glob'
            return File.fnmatch(pattern, target)
        when 'logic'
            logerr("Match method logic not implemented yet")
            return false
        when 'regex'
            return target.match(pattern) ? true : false
        else
            logerr("Match method #{ matchmethod } is unsupported")
    end

    return false
end

def merge_features(features, featureconf)
    if !featureconf.kind_of?(Hash) then
        logerr('input type error: featureconf is not a hash')
        return
    end

    featureconf.each do |key, value|
        if !key.kind_of?(String) then
            logerr('input type error: key not a string')
            next
        end

        if !(value == true || value == false \
               || value.kind_of?(Integer) \
               || value.kind_of?(String)) then
            logerr('input type error: value not valid')
            next
        end

        features[key] = value.to_s
    end
end

def take_field(cmd, fieldnum)
    result = %x(#{ cmd })
    status = $?.exitstatus
    if status != 0 then
        logerr("#{ cmd } returned #{ status }")
        return nil
    end

    result.split("\n").map { |line| (line.split(' '))[fieldnum-1] }
end

def usage()
    puts <<-EOF
Usage:
    puavo-conf-mkdb [--sources comma-separated-list-of-sources]

By default the list of used sources is
"defaults profiles hwquirks puavo primaryuser kernelargs"
and these are the only available configuration sources.
EOF
end

class Sources
    attr_reader :features

    Available = %w(defaults profiles hwquirks puavo primaryuser kernelargs)

    def initialize(sources)
        @sources = []
        sources.each do |source|
            if !Available.include?(source) then
                warn("source '#{ source }' is unknown")
                next
            end

            @sources << source
        end

        @features_by_source = {}

        @sources.each do |source|
            next if source == 'profiles'
            @features_by_source[source] = send(source)
        end

        # Profiles are special: other sources affect the profiles chosen.
        # Note that in merge() source order always matters.
        profile_sources = merge()
        @features_by_source['profiles'] = profiles(profile_sources)

        @features = merge()
    end

    def merge
        features = {}
        @sources.each do |source|
            next unless @features_by_source.has_key?(source)
            features.merge!( @features_by_source[source] )
        end

        return features
    end

    # settings from image defaults
    def defaults
        features = {}

        image_defaults_globpattern = '/usr/share/puavo/features/*/info.json'

        image_defaults_files = Dir.glob(image_defaults_globpattern) rescue []
        if image_defaults_files.count == 0 then
            logerr('No image defaults files found')
        end

        image_defaults_files.each do |file|
            begin
                feature_info = JSON.parse( IO.read(file) )
                if !feature_info.kind_of?(Hash) then
                    raise 'input type error: image defaults is not a Hash'
                end

                if !(feature_info.has_key?('keys') \
                       && feature_info['keys'].kind_of?(Hash)) then
                        raise 'input type error: keys value not a Hash'
                end

                feature_info['keys'].each do |key, keyinfo|
                    if !keyinfo.kind_of?(Hash) then
                        logerr('input type error: defaults keyinfo not a hash')
                        next
                    end
                    if !keyinfo.has_key?('default') then
                        logerr('input type error: keyinfo does not have' \
                                 + ' a default value')
                        next
                    end

                    merge_features(features, { key => keyinfo['default'] })
                end
            rescue StandardError => e
                logerr("Could not read feature defaults from #{ file }: " \
                         + e.message)
            end
        end

        return features
    end

    # feature-profiles
    def profiles(feature_configuration)
        features = {}

        feature_profiles = []
        feature_profiles_path = '/etc/puavoimage/feature-profiles.json'
        begin
            feature_profiles = JSON.parse( IO.read(feature_profiles_path) )
            feature_lookup = lambda do |key|
                                 feature_configuration.has_key?(key)  \
                                     ? [ feature_configuration[key] ] \
                                     : nil
                             end
            apply_feature_profiles(features, feature_profiles, feature_lookup)
        rescue StandardError => e
            logerr('Could not apply feature profiles from' \
                     + " #{ feature_profiles_path }: #{ e.message }")
        end

        return features
    end

    # settings based on hardware quirks (dmidecode, pci, usb, ...)
    def hwquirks
        features = {}

        hardware_quirks_globpattern = '/usr/share/puavo/hwquirks/*/*.json'

        hwquirk_files = Dir.glob(hardware_quirks_globpattern) rescue []
        hwquirk_files.each do |hwquirk_file|
            begin
                hwquirklist = JSON.parse( IO.read(hwquirk_file) )
                apply_feature_profiles(features,
                                       hwquirklist,
                                       Proc.method(:get_device_setting))
            rescue StandardError => e
                logerr('could not read hardware quirks from' \
                         + " #{ hwquirk_file }: #{  e.message }")
            end
        end

        return features
    end

    # settings from puavo
    def puavo
        features = {}

        begin
            puavo_settings = JSON.parse( IO.read('/etc/puavo/device.json') )
            if !(puavo_settings.kind_of?(Hash) \
                   && puavo_settings['features'].kind_of?(Hash)) then
                raise 'input type error: puavo feature settings' \
                        + ' not in correct format'
            end

            puavo_settings['features'].each do |key, value|
                merge_features(features, { key => value })
            end
        rescue StandardError => e
            logerr('Could not read features from /etc/puavo/device.json: ' \
                      + e.message)
        end

        return features
    end

    # settings from primary user
    def primaryuser
        # XXX unimplemented
        return {}
    end

    # settings from kernel arguments
    def kernelargs
        features = {}

        begin
            kernel_cmdline = IO.read('/proc/cmdline')
            kernel_args = kernel_cmdline.split

            # A quirk for backwards compatibility:
            # "puavo.hosttype=FOO" is the same as "puavo.feature.hosttype=FOO".
            # If both are specified and conflicting, the value in
            # "puavo.feature.hosttype" wins.
            kernel_args.each do |kernel_arg|
                match = kernel_arg.match(/\Apuavo\.hosttype=(.*)\Z/)
                if match then
                    merge_features(features, { 'hosttype' => match[1] })
                end
            end

            kernel_args.each do |kernel_arg|
                match = kernel_arg.match(/\Apuavo\.feature\.(.*?)=(.*)\Z/)
                if match then
                    merge_features(features, { match[1] => match[2] })
                end
            end
        rescue StandardError => e
            logerr('could not read kernel command line arguments')
        end

        return features
    end
end

if Process.euid != 0 then
    logerr("#{ File.basename($0) } must be run as root")
    exit 1
end

$status = 0

conf_sources = %w(defaults profiles hwquirks puavo primaryuser kernelargs)

begin
    opts = GetoptLong.new([ '--sources', GetoptLong::REQUIRED_ARGUMENT ])

    opts.each do |opt, arg|
        case opt
            when '--sources'
                conf_sources = arg.split(',')
        end
    end

rescue GetoptLong::InvalidOption => e
    usage
    exit 1
end

sources = Sources.new(conf_sources)

#
# make db
#

# future development idea:
#     value could be be of type { '+': [ ... ], '-': [ ... ]},
#     ... could be Arrays, we could them serialize
#     those into the database with [].join(',').
#     this should have been handled previously

puts '> Creating puavo-conf database with the following values:'
puavoconf = Puavo::Conf.new()

features = sources.features
max_keylength = features.keys.map { |s| s.length }.max
features.sort.each do |key, value|
    puavoconf.set(key, value)
    printf "    %-*s %s\n", max_keylength + 2, key, value
end
puavoconf.close
puts '> Done!'

exit($status)
