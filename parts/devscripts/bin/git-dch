#!/bin/bash
##
## Copyright (C) 2015 Opinsys Oy
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.
##
## Author: Tuomas Räsänen <tuomasjjrasanen@tjjr.fi>
##

set -eu

on_exit()
{
    if [ -n "${tmpdir}" ]; then
        rm -rf "${tmpdir}"
    fi

    exit $exitvalue
}

changelog_file=debian/changelog

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)
            shift
            echo "Usage: $0 [OPTION]..."
            echo
            echo 'This script automates the maintenance of Debian changelog file in Git'
            echo 'repositories.'
            echo
            echo 'If there are new commits on top of the last release commit, the'
            echo 'user is prompted with a suggestion to create a release commit. If'
            echo 'the user accepts, changelog is updated, commited and the'
            echo 'script exits with zero status code. If the user rejects, or the'
            echo 'script fails, the scripts exits with zero status code without'
            echo 'making any changes.'
            echo
            echo "Options:"
            echo "    -h, --help                   print help and exit"
            echo "    -f, --changelog FILE         edit FILE instead of ${changelog_file}"
            echo
            exit 0
            ;;
        -f|--changelog)
            shift
            if [ $# -eq 0 ]; then
                echo 'error: option -f requires an argument' >&2
                exit 1
            fi
            changelog_file=$1
            shift
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo "error: invalid argument '$1'" >&2
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

if [ $# -ne 0 ]; then
    echo "error: invalid number of arguments ($#), expected 0" >&2
    exit 1
fi

git diff-index --quiet HEAD -- || {
    echo 'error: there are uncommitted changes, please stash or commit them first' >&2
    exit 1
}

if [ -z "$(git ls-tree HEAD "${changelog_file}")" ]; then
    echo "error: changelog file '${changelog_file}' is not part of the HEAD tree" >&2
    exit 1
fi

if [ ! -f "${changelog_file}" ]; then
    echo "error: changelog file '${changelog_file}' is missing" >&2
    exit 1
fi

if git log -n1 --format='%s' | egrep -q '^RELEASE: '; then
    ## No commits since the last release, nothing to do.
    exit 0
fi

## Update the changelog.
commit=$(sed -r -n 's/^  \* Git\(([a-z0-9]+)\)$/\1/p' "${changelog_file}" | head -n1)
lines=$(git log --oneline --no-merges --format=format:'%s' "${commit}...HEAD")
head_commit=$(git rev-parse HEAD)

exitvalue=1
tmpdir=

trap on_exit EXIT

tmpdir=$(mktemp -d)

cp -a "${changelog_file}" "${tmpdir}"

user=$(git config user.name)
if [ -n "${user}" -a -z "${DEBFULLNAME:-}" ]; then
    DEBFULLNAME="${user}"
    export DEBFULLNAME
fi

email=$(git config user.email)
if [ -n "${email}" -a -z "${DEBEMAIL:-}" ]; then
    DEBEMAIL="${email}"
    export DEBEMAIL
fi

new_version=
old_version=$(dpkg-parsechangelog -l"${tmpdir}/changelog" | sed -r -n 's/^Version: //p')
if [[ "${old_version}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)\+([0-9a-f]+)$ ]]; then
    old_major_version="${BASH_REMATCH[1]}"
    old_minor_version="${BASH_REMATCH[2]}"
    new_version="${old_major_version}.$((old_minor_version + 1)).0~rc1+${head_commit}"
elif [[ "${old_version}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)~([0-9a-f]+)$ ]]; then
    old_major_version="${BASH_REMATCH[1]}"
    old_minor_version="${BASH_REMATCH[2]}"
    new_version="${old_major_version}.$((old_minor_version + 1)).0~rc1+${head_commit}"
elif [[ "${old_version}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)~rc([0-9]+)\+([0-9a-f]+)$ ]]; then
    old_major_version="${BASH_REMATCH[1]}"
    old_minor_version="${BASH_REMATCH[2]}"
    old_patch_version="${BASH_REMATCH[3]}"
    old_rc_version="${BASH_REMATCH[4]}"
    new_version="${old_major_version}.${old_minor_version}.${old_patch_version}~rc$((old_rc_version + 1))+${head_commit}"
fi

## Ask for version
exec < /dev/tty
while true; do
    read -e -p "New version number? [${new_version}] " answer || break
    if [ -z "${answer}" ]; then
	answer="${new_version}"
    fi
    if [[ "${answer}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(~rc[0-9]+)?\+([0-9a-f]+)$ ]]; then
	new_version="${answer}"
	break
    fi

    echo "Invalid version." >&2
done

dch -c "${tmpdir}/changelog" -v"${new_version}" -U 'New release'
echo "${lines}" \
    | while read line; do
          if echo "${line}" | egrep -q '^RELEASE: '; then
              break
          fi
          dch -c "${tmpdir}/changelog" "${line}"
      done
dch -c "${tmpdir}/changelog" "Git(${head_commit})"
dch -c "${tmpdir}/changelog" --release ''

dpkg-parsechangelog -l"${tmpdir}/changelog" -n1 | sed -n '/^Changes:/,$p'

## Ask for confirmation.
exec < /dev/tty
while true; do
    read -e -p 'Make a release? [Y/n] ' answer || break
    case "${answer}" in
        ''|Y|y)
            cp "${tmpdir}/changelog" "${changelog_file}"
            version=$(dpkg-parsechangelog "-l${changelog_file}" | sed -r -n 's/^Version: //p')
            git commit "${changelog_file}" -m "RELEASE: ${version}"
	    exitvalue=0
            break
            ;;
        N|n)
            break
            ;;
        *)
            echo "Please answer 'y' or 'n'." >&2
            continue
            ;;
    esac
done
