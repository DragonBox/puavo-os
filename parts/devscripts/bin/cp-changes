#!/bin/sh

set -eu

do_move=false
cp_flags='-v -a -n'

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)
            shift
            echo "Usage: $0 [OPTION]... [CHANGES_FILE] DIR"
            echo
            echo 'Copy or move files listed in .changes file to the target directory.'
            echo 'If CHANGES_FILE is omitted, it will be deduced from debian/changelog.'
            echo
            echo "Options:"
            echo "    -h, --help                   print help and exit"
            echo "    -l, --link FILE              link files instead of copying"
            echo "    -m, --move FILE              move files instead of copying"
            echo
            exit 0
            ;;
        -l|--link)
            shift
            cp_flags="${cp_flags} -l"
            ;;
        -m|--move)
            shift
            do_move=true
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo "error: invalid argument '$1'" >&2
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

if [ $# -eq 1 ]; then
    pkg_name=$(dpkg-parsechangelog -SSource)
    pkg_version=$(dpkg-parsechangelog -SVersion)
    pkg_arch=$(dpkg-architecture -qDEB_BUILD_ARCH)
    changes_file="../${pkg_name}_${pkg_version}_${pkg_arch}.changes"
    target_dir=$1
elif [ $# -eq 2 ]; then
    changes_file=$1
    target_dir=$2
else
    echo "Error: Invalid number of arguments ($#), expected 2" >&2
    echo "Usage: $0 CHANGES_FILE TARGET_DIR" >&2
    echo "Usage: $0 TARGET_DIR" >&2
    exit 1
fi

source_dir=$(dirname "${changes_file}")

mkdir -p "${target_dir}"

if $do_move; then
    awk -v"source_dir=${source_dir}" \
        'NR == 1, /^Files:$/ { next } { printf "%s/%s%c", source_dir, $5, 0 }' \
        "${changes_file}" | xargs -0 mv -v -n -t "${target_dir}"

    mv -v -n -t "${target_dir}" "${changes_file}"
else
    awk -v"source_dir=${source_dir}" \
        'NR == 1, /^Files:$/ { next } { printf "%s/%s%c", source_dir, $5, 0 }' \
        "${changes_file}" | xargs -0 cp ${cp_flags} -t "${target_dir}"

    cp ${cp_flags} -t "${target_dir}" "${changes_file}"
fi
