#!/usr/bin/ruby2.0

require 'puavo/gems'
require 'optparse'
require 'http'
require 'puavo/etc'
require "httpclient"

options = {
  :puavo_image_series_server => "https://images.opinsys.fi"
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: puavo-upload-image [options] <file>"

  opts.on("--server SERVER", "Puavo Image Series server host") do |server|
    options[:puavo_image_series_server] = server
  end

  opts.on("--image-series IMAGE_SERIES") do |image_series|
    options[:image_series] = image_series
  end

  opts.on_tail("-h", "--help", "Show this message") do
    STDERR.puts opts
    Process.exit
  end
end

parser.parse!

unless ARGV[0]
  puts "Set upload file!"
  Process.exit(1)
end

upload_file_path = ARGV[0]

sha256 = Digest::SHA256.new
upload_file = File.open(upload_file_path, 'rb') do |io|
  while (buffer = io.read(4096))
    sha256.update(buffer)
  end
end

def post(*args)
  request("post", *args)
end

def put(*args)
  request("put", *args)
end

def request(method, *args)
  response = @client.send(method, *args)

  if response.status =! 200
    puts "Something went wrong! Response status: #{ response.status }, body: #{ response.body }"
    Process.exit(1)
  end

  begin
    response_data = JSON.parse(response.body)
  rescue JSON::ParserError
    puts "Request: #{ method }: #{ args.first }"
    puts "An invalid response data was received: " + response.body
    Process.exit(1)
  end

  return response_data
end


@client = HTTPClient.new()
@client.send_timeout = 60 * 60 * 2
@client.receive_timeout = 60 * 60 * 2

image = post(options[:puavo_image_series_server] + "/series/" + options[:image_series] + "/image",
             { :sha256 => sha256.hexdigest })

upload_file = File.open(upload_file_path)
upload = post(image["upload_url"], {
                'Content-Transfer-Encoding' => 'binary',
                :content => upload_file } )
upload_file.close

if upload["status"] == "successfully"
  puts "Image has been sent successfully"
else
  puts "Something went wrong: "
  puts upload["error"] if upload.has_key?("error")
end
