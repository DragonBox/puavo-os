#!/usr/bin/ruby

require 'json'
require 'puavo/ldap'
require 'puavo/web'
require 'syslog'

def lookup_ldapprinters(puavoldap)
  ldapprinters = {}
  puavoldap.search('(objectClass=cupsPrinter)') do |entry|
    entryhash = entry.to_hash
    descr = Array(entryhash['printerDescription']).first
    (ldapprinters[descr] ||= []) << entryhash
  end
  ldapprinters
end

def parse_cups_printers_conf
  printers_conf = File.readlines('/etc/cups/printers.conf')

  printers = {}
  printer  = nil

  printers_conf.each do |line|
    match = line.match(/^<(?:DefaultPrinter|Printer) (.*)>$/)
    if match
      printer = match[1]
      printers[printer] = {}
    elsif line.match(%r{^</Printer>$})
      printer = nil
    else
      if printer then
        z, key, value = * line.match(/^([^ ]+) (.*)$/)
	printers[printer][key] = value
      end
    end
  end

  printers
end

def printer_to_json(cupsprinter, printerinfo, server_dn)
  ppdfile = File.read("/etc/cups/ppd/#{ cupsprinter }.ppd") rescue ''
  {
    'printer' => {
      'printerDescription'  => cupsprinter, 
      'printerLocation'     => printerinfo['Location']  || '',
      'printerMakeAndModel' => printerinfo['MakeModel'] || '',
      'printerType'         => printerinfo['Type']      || '',
      'printerURI'          => printerinfo['DeviceURI'] || '',
      'puavoPrinterPPD'     => ppdfile,
      'puavoRule'           => '*',
      'puavoServer'         => server_dn,
    },
  }.to_json
end

def send_printers(cupsprinters, ldapprinters, puavoldap)
  cupsprinters.each do |cupsprinter, printerinfo|
    puavoweb = PuavoWeb.new(puavoldap)
    puavoservers = \
      ldapprinters[cupsprinter] ? ldapprinters[cupsprinter].map do |cp|
				    Array(cp['puavoServer']).first
				  end :
      []

    if not puavoservers.include?(puavoldap.dn) then
      json = printer_to_json(cupsprinter, printerinfo, puavoldap.dn)
      response = puavoweb.send_json('/devices/printers.json', json)
      loglevel =
	response.code.match(/^2/) ? Syslog::LOG_NOTICE : Syslog::LOG_WARNING
      Syslog.log(loglevel,
		 '%s',
		 "Sending printer info for #{ cupsprinter } to puavo: " \
		   + "#{ response.code } - #{ response.message }")
    end
  end
end

Syslog.open(File.basename($0),
            Syslog::LOG_NDELAY|Syslog::LOG_PERROR|Syslog::LOG_PID,
            Syslog::LOG_USER)

begin
  puavoldap = PuavoLdap.new
  send_printers(parse_cups_printers_conf(),
		lookup_ldapprinters(puavoldap),
		puavoldap)
rescue Exception => msg
  Syslog.log(Syslog::LOG_ERR, '%s', msg)
end

Syslog.close
