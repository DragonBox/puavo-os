#!/bin/sh

#
# argument parsing
#

set -e

next_image=$1

set -u

log() { echo "$2" | logger -p "$1" -s -t puavo-update-ltspimage; }

if [ -z "$next_image" ]; then
  log err "Usage: $(basename $0) next_ltsp_image_name"
  exit 1
fi

# XXX should get these from command line, somehow
# rate_limit_opts="--limit-rate 50k"
rate_limit_opts=""

#
# subroutines
#

check_with_cksum() {
  filename=$1
  actual_file_path=$2
  checksums_file=$3

  if ! [ -r "$actual_file_path" ]; then
    log err "could not find a file $filename to check"
    return 1
  fi

  calculated_checksum_line="$(
    cksum "$actual_file_path" | awk -v filename="$filename" '$3 = filename')"

  if fgrep -qx "$calculated_checksum_line" "$checksums_file"; then
    log info "checksum for file $filename is okay"
    return 0
  else
    log err \
      "file $filename failed checksum check, removing $actual_file_path"
    rm -f "$actual_file_path"
    return 1
  fi
}

cleanup_previous_runs() {
  images_dir=$1
  rdiffs_dir=$2
  rdiff_filename=$3

  # cleanup old ltsp images (and their possible temporary *.tmp files).
  # The ltsp-backup.img is going to go too...
  find "$images_dir" -maxdepth 1 -type f -a \
    '(' '(' -name '*.img' -o -name '*.img.tmp' ')' \
        -a '!' -samefile "${images_dir}/ltsp.img" ')' \
    -exec rm -f \{} \;

  # cleanup old rdiff files, except those that we want to use right now
  find "$rdiffs_dir" -maxdepth 1 -type f -a \
    '(' '(' -name '*.rdiff' -o -name '*.rdiff.tmp' ')' \
        -a '!' '('    -name "${rdiff_filename}" \
		   -o -name "${rdiff_filename}.tmp" ')' ')' \
    -exec rm -f \{} \;
}

ensure_enough_available_diskspace() {
  images_dir=$1
  rdiffs_dir=$2

  # 133% of the space taken by the current image is probably enough
  # for updating to new image
  required_diskspace=$(stat -c '1.33 * %s' "${images_dir}/ltsp.img" \
			 | bc -l | xargs printf %.0f)

  for dir in "$images_dir" "$rdiffs_dir"; do 
    diskspace=$(stat -f -c '%S * %a' "$dir" | bc -l | xargs printf %.0f)
    echo "comparing $diskspace -lt $required_diskspace"
    if [ "$diskspace" -lt "$required_diskspace" ]; then
      msg="Only $diskspace bytes available on $dir,"
      msg="$msg need $required_diskspace bytes"
      log err "$msg"
      return 1
    fi
  done
}

fetch_with_curl() {
  extra_curl_opts=$1
  output_path=$2  
  url=$3

  # according to curl(1) --fail is not enough
  curl_status_code=$(
    curl --cacert /etc/puavo/certs/rootca.pem \
	 --continue-at - \
	 $extra_curl_opts \
	 --output "$output_path" \
	 -w "%{http_code}\n" \
	 "$url" \
      || true)

  case "$curl_status_code" in
    # 2*  == success
    # 416 == "Requested Range not satisfiable" (file should be finished)
    2*|416)
      log info "fetched $url with status code $curl_status_code"
      return 0
      ;;
    *)
      log err "curl returned status code $curl_status_code"
      return 1
      ;;
  esac
}

get_checksums_file() {
  extra_curl_opts=$1
  images_dir=$2
  url=$3

  checksum_file_path="${images_dir}/CKSUMS"

  fetch_with_curl "$extra_curl_opts" \
		  "${checksum_file_path}.tmp" \
		  "$url"
  mv "${checksum_file_path}.tmp" "${checksum_file_path}"

  echo "${checksum_file_path}"
}

get_rdiff() {
  rdiffs_dir=$1
  extra_curl_opts=$2
  rdiff_filename=$3
  rdiff_url=$4
  checksums_file=$5

  rdiff_path="${rdiffs_dir}/${rdiff_filename}"

  if [ -e "$rdiff_path" ]; then
    log info "the rdiff file $rdiff_filename is already in place"
    return 0
  fi

  mkdir -p "$rdiffs_dir"

  rdiff_tmp="${rdiff_path}.tmp"
  fetch_with_curl  "$extra_curl_opts" "$rdiff_tmp" "$rdiff_url"
  check_with_cksum "$rdiff_filename"  "$rdiff_tmp" "$checksums_file"

  mv "$rdiff_tmp" "$rdiff_path"
}

# XXX somewhat duplicate code with build_rdiffs.sh
get_rdiff_filename() {
  previous_image_name=$1
  next_image_name=$2

  echo "$previous_image_name $next_image_name" \
    | awk '
        NR == 1 {
	  orig   = $1
	  target = $2
	  regex  = "^(.*?)-([0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6})-(.*?).img$"
     
	  if (match(orig, regex, orig_match) \
	    && match(target, regex, target_match)) {
	      printf("%s-%s--%s-%s.rdiff\n",
		     orig_match[1],
		     orig_match[2],
		     target_match[2],
		     orig_match[3])
	      exit(0)
	  }
	  else { exit(1) }
	}
      '
}

# XXX duplicate code with puavo-install-ltspimages
lookup_current_ltspimage_name() {
  images_dir=$1

  current_ltspimage_path=$images_dir/ltsp.img
  current_ltspimage_inode="$(stat -c %i $current_ltspimage_path 2>/dev/null \
			       || true)"

  for file in $images_dir/*.img; do
    # check that *.img expands to something
    test -e "$file" || continue

    # ltsp.img is not what we are looking for
    test "$file" = "$current_ltspimage_path" && continue

    # we want its other name...
    if [ "$(stat -c %i "$file" || true)" = "$current_ltspimage_inode" ]; then
      echo "$(basename "$file")"
      return
    fi
  done

  log err "could not find the current ltsp image name"
  return 1
}

lookup_image_server_from_dns() {
  puavo_domain=$(cat /etc/puavo/domain)
  image_server=$(
    dig SRV "_imageserver._tcp.${puavo_domain}" +search +short \
      | awk '{ sub(/\.$/, ""); printf "%s:%s", $4, $3 }')

  if [ -z "$image_server" ]; then
    log err "could not find the image server from DNS"
    return 1
  else
    echo "$image_server"
  fi
}

patch_with_rdiff() {
  images_dir=$1
  rdiffs_dir=$2
  previous_image=$3
  next_image=$4
  rdiff_filename=$5
  checksums_file=$6

  # rdiff might fail due to a corrupt rdiff-file or for some other reason.
  # We let rdiff pass through in case of failure, and we check the correctness
  # of the output right after (removing the output if the checksum is bad).
  rdiff patch "${images_dir}/${previous_image}" \
	      "${rdiffs_dir}/${rdiff_filename}" \
	      "${images_dir}/${next_image}.tmp" \
    || true

  check_with_cksum "$next_image"                     \
		   "${images_dir}/${next_image}.tmp" \
		   "$checksums_file"

  sync
  mv "${images_dir}/${next_image}.tmp" "${images_dir}/${next_image}"
}

# XXX duplicate code with puavo-install-ltspimages
set_image_as_default_image() {
  images_dir=$1
  imagename=$2
  imagepath=$images_dir/$imagename

  backup_ltspimage_path=$images_dir/ltsp-backup.img
  default_ltspimage_path=$images_dir/ltsp.img

  ln -f "$default_ltspimage_path" "$backup_ltspimage_path" 2>/dev/null || true
  ln -f "$imagepath" "${default_ltspimage_path}.tmp"
  sync
  mv "${default_ltspimage_path}.tmp" "$default_ltspimage_path"
  sync

  log notice "new ltsp image $imagename has been set as default"
}

#
# main
#

# be_very nice
ionice -c 3  -p $$
renice -n 20 -p $$ > /dev/null

images_dir=/images

if [ -e "${images_dir}/${next_image}" ]; then
  log info "the requested ltsp image is already in place"
  exit 0
fi

image_server=$(lookup_image_server_from_dns)

rdiffs_dir=${images_dir}/rdiffs
previous_image=$(lookup_current_ltspimage_name $images_dir)
rdiff_filename=$(get_rdiff_filename $previous_image $next_image)

cleanup_previous_runs "$images_dir" \
		      "$rdiffs_dir" \
		      "$rdiff_filename"

ensure_enough_available_diskspace "$images_dir" "$rdiffs_dir"

checksums_file=$(
  get_checksums_file "$rate_limit_opts" \
		     "$images_dir"      \
		     "https://${image_server}/images/CKSUMS")

rdiff_url="https://${image_server}/images/rdiffs/${rdiff_filename}"

get_rdiff "$rdiffs_dir"      \
	  "$rate_limit_opts" \
	  "$rdiff_filename"  \
	  "$rdiff_url"       \
	  "$checksums_file"

patch_with_rdiff "$images_dir"     \
		 "$rdiffs_dir"     \
		 "$previous_image" \
		 "$next_image"     \
		 "$rdiff_filename" \
	  	 "$checksums_file"

set_image_as_default_image "$images_dir" "$next_image"
