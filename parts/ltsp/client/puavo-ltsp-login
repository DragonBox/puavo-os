#!/usr/bin/ruby

=begin

This is a small script that can be used on diskless thin clients
to cache passwd and group info from LDAP locally at login time.
It requires kerberos authentication with pam_krb5.so to be done
before calling. The script first queries the DNS server for LDAP 
SRV record _ldap._tcp.#{puavo_domain} and connects the first LDAP
server returned. If it does not respond, LDAP master server is
contacted (TBD).

NOTE: The script always uses ldap+start_tls to connect and CA
certificates need to be configured properly in /etc/ldap/ldap.conf

The script checks for the following env variables:

PAM_KRB5CCNAME - set by pam_krb5, contents are copied to KRB5CCNAME
PAM_USER       - passwd and group info is fetched for this user

The following Puavo settings need to be set:

/etc/puavo/ldap/base   - LDAP base, e.g. dc=edu,dc=example,dc=org
/etc/puavo/ldap/master - LDAP master server fqdn

The script writes the following files for libnss-extrausers:

/var/lib/extrausers/passwd
/var/lib/extrausers/group

Configuration examples:

/etc/nsswitch.conf:

passwd:         compat extrausers
group:          compat extrausers
shadow:         compat

/etc/pam.d/service:

auth    required          pam_krb5.so minimum_uid=1000 debug use_first_pass
auth    optional          pam_exec.so /usr/local/sbin/puavo_pam_login

/etc/ldap/ldap.conf:

BASE		dc=edu,dc=example,dc=fi
NETWORK_TIMEOUT	15
SASL_MECH	GSSAPI
TIMEOUT		15
TLS_CACERT	/etc/ssl/certs/example-ca.crt
TLS_REQCERT	demand
URI		ldap://ldap.example.org


On Ubuntu 12.04 the following packages are needed:

sudo apt-get install libnss-extrausers ruby1.9.3 ruby-ldap ruby-dnsruby

=end

require 'ldap'
require 'etc'
require 'dnsruby'

uid = ENV['PAM_USER']

if !uid or uid.eql?("root")  
  exit(0)
end

suffix = File.read('/etc/puavo/ldap/base').chomp
ldap_master = File.read('/etc/puavo/ldap/master').chomp
puavo_domain = File.read('/etc/puavo/domain').chomp

dname = "_ldap._tcp.#{puavo_domain}"
res   = Dnsruby::DNS.new
ldap_srv = Hash.new

begin
  res.each_resource(dname, 'SRV') { |rr|
    ldap_srv[rr.priority] = rr.target.to_s
  }
rescue Exception => e
  print "Can't find SRV records for #{dname}: ", e, "\n"
end

min_priority = (ldap_srv.keys.sort)[0]
ldap_slave = ldap_srv[min_priority]

if !ENV['KRB5CCNAME']
  ENV['KRB5CCNAME'] = ENV['PAM_KRB5CCNAME']
end

conn = LDAP::Conn.new(host=ldap_slave, port=389)
conn.set_option(LDAP::LDAP_OPT_PROTOCOL_VERSION, 3)
conn.start_tls

conn.sasl_bind("", "GSSAPI") do
  begin
    passwd = Array.new
    group = Array.new

    conn.search("ou=People,#{suffix}", LDAP::LDAP_SCOPE_SUBTREE, "(&(objectClass=posixAccount)(uid=#{uid}))", ["uid", "uidNumber", "gidNumber", "homeDirectory", "displayName"]) {|e|
      if e.get_values('uid') and e.get_values('uidNumber') and
         e.get_values('gidNumber') and e.get_values('homeDirectory') and
         e.get_values('displayName')

        uid = e.get_values('uid')[0]
        uidNumber = e.get_values('uidNumber')[0]
        gidNumber = e.get_values('gidNumber')[0]
        # Temporary override until old LDAP attributes have been migrated
#        homeDirectory = e.get_values('homeDirectory')[0]
        homeDirectory = "/home/#{uid}"
        cn = e.get_values('displayName')[0]

        passwd << "#{uid}:x:#{uidNumber}:#{gidNumber}:#{cn}:#{homeDirectory}:/bin/bash"
      end
    }

    conn.search("ou=Groups,#{suffix}", LDAP::LDAP_SCOPE_SUBTREE, "(&(objectClass=posixGroup)(memberUid=#{uid}))", ["gidNumber", "cn"]) {|e|
      if e.get_values('gidNumber') and
         e.get_values('cn')

          gidNumber = e.get_values('gidNumber')[0]
          cn = e.get_values('cn')[0]

          group << "#{cn}:x:#{gidNumber}:#{uid}"
      end
    }

    File.open("/var/lib/extrausers/passwd", "w") do |file|
      passwd.each do |entry|
        file.puts entry
      end
    end

    File.open("/var/lib/extrausers/group", "w") do |file|
      group.each do |entry|
        file.puts entry
      end
    end


  rescue LDAP::ResultError
    conn.perror("LDAP connection failed")
  end  
end

exit(0)
