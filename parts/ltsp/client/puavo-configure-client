#!/usr/bin/ruby

require 'erb'
require 'json'
require 'fileutils'
require 'puavo/conf'

def delete_file(file)
  if File.exists?(file)
    File.delete(file)
  end
end

def read_file(file)
  if File.exists?(file)
    return File.read(file).chomp
  end

  return ""
end

def write_config(filename, version=nil, secure=false)
  begin
    template_file = filename

    if version
      template_file = "#{filename}-#{version}"
    end

    conf_template = File.read("/usr/share/puavo-ltsp-client/templates#{template_file}")
    conf = ERB.new(conf_template, 0, "%<>")

    perm = secure ? 0600 : 0644

    File.open(filename, "w", perm) do |f|
      f.write conf.result
    end

    File.chmod(perm, filename)
  rescue StandardError => e
    $stderr.puts "FAILED to write: #{filename} from /usr/share/puavo-ltsp-client/templates#{template_file}: #{e}"
  end
end

@puavo_device_type = ARGV[0]

@puavoconf = Puavo::Conf.new

@puavo_autoeth_enabled     = @puavoconf.get('puavo.autoeth.enabled') == 'true'
@puavo_device_type         = @puavoconf.get('puavo.hosttype')
@puavo_guestlogin_enabled  = @puavoconf.get('puavo.guestlogin.enabled')
@puavo_guestlogin_mode     = @puavoconf.get('puavo.guestlogin.mode')
@puavo_xsessions_default   = @puavoconf.get('puavo.xsessions.default')
@puavo_xsessions_locked    = @puavoconf.get('puavo.xsessions.locked') == 'true'

@enable_suspend    = (@puavoconf.get('puavo.pm.suspend.enabled') == 'true')
@enable_lidsuspend = @enable_suspend && (@puavoconf.get('puavo.pm.lidsuspend.enabled') == 'true')

@puavoconf.close

@device = {}
@tags = []

Uninstalled_device_types = %w(diskinstaller preinstalled unregistered)
if Uninstalled_device_types.include?(@puavo_device_type) then
  if @puavo_device_type == 'preinstalled' then
    write_config("/etc/pam.d/gdm-autologin", "preinstalled")
    write_config("/etc/sudoers.d/puavo-install-when-preinstalled")
    write_config("/etc/xdg/autostart/puavo-install.desktop")
  end

  exit(0)
end

@ldap_master       = read_file('/etc/puavo/ldap/master')
@ldap_slave        = read_file('/etc/puavo/ldap/slave')
@ldap_base         = read_file('/etc/puavo/ldap/base')
@kerberos_master   = read_file('/etc/puavo/kerberos/master')
@kerberos_realm    = read_file('/etc/puavo/kerberos/realm' )
@kerberos_toprealm = read_file('/etc/puavo/kerberos/toprealm' )
@puavo_hostname    = read_file('/etc/puavo/hostname')
@puavo_domain      = read_file('/etc/puavo/domain')
@puavo_topdomain   = read_file('/etc/puavo/topdomain')

if File.exists?("/etc/puavo/device.json")
  @device = JSON.parse( File.read("/etc/puavo/device.json") )
  @tags   = @device["tags"] || []
end

# XXX This ugliness must be, because /var/lib/puavo-desktop/shared may reside
# XXX on /state partition, and its concept of uids/gids may not match the
# XXX current image (there should be some solution to this ugliness).
FileUtils.chown('puavodesktop',
                'puavodesktop',
                '/var/lib/puavo-desktop/shared')

case @puavo_device_type
  when "fatclient"
    write_config("/etc/dbus-1/system.d/org.freedesktop.login1.conf")
    write_config("/etc/default/nfs-common", "userprincipal")
    write_config("/etc/idmapd.conf")
    write_config("/etc/krb5.conf")
    write_config("/etc/ldap/ldap.conf")
    write_config("/etc/nsswitch.conf", "extrausers")
    write_config("/etc/pam.d/gdm-autologin", "fatclient")
    write_config("/etc/pam.d/gdm-password", "fatclient")
    write_config("/etc/rsyslog.conf")
    write_config("/etc/rsyslog.d/send_to_syslogserver.conf")

    if @puavo_xsessions_default == 'puavo-webkiosk' then
      write_config("/etc/polkit-1/localauthority/50-local.d/90.org.freedesktop.networkmanager.deny_in_webkiosk_mode.pkla")
    end

    delete_file('/usr/share/dbus-1/system-services/fi.epitest.hostap.WPASupplicant.service')
    delete_file('/usr/share/dbus-1/system-services/fi.w1.wpa_supplicant1.service')
  when "laptop"
    write_config("/etc/dbus-1/system.d/org.freedesktop.login1.conf")
    write_config("/etc/idmapd.conf")
    write_config("/etc/krb5.conf", "laptop")
    write_config("/etc/ldap/ldap.conf", "laptop")
    write_config("/etc/nsswitch.conf", "sss-extrausers")
    write_config("/etc/ntp.conf")
    write_config("/etc/pam.d/gdm-autologin", "laptop")
    write_config("/etc/pam.d/gdm-password", "laptop")
    write_config("/etc/pam.d/gnome-screensaver", "laptop")
    write_config("/etc/pam.d/sudo", "laptop")
    write_config("/etc/racoon/racoon.conf")
    write_config("/etc/samba/smb.conf", "laptop")
    write_config("/etc/systemd/logind.conf")

    # XXX should this Ubuntu-specific file be used in Debian?
    # write_config("/var/lib/polkit-1/localauthority/10-vendor.d/com.ubuntu.desktop.pkla")

    if @puavo_xsessions_default == 'puavo-webkiosk' then
      write_config("/etc/polkit-1/localauthority/50-local.d/90.org.freedesktop.networkmanager.deny_in_webkiosk_mode.pkla")
    end

    @ldap_binddn       = read_file('/etc/puavo/ldap/dn')
    @ldap_bindpw       = read_file('/etc/puavo/ldap/password')

    write_config("/etc/sssd/sssd.conf", "laptop", true)

    # Make sure that the nss-extrausers database files exist so that
    # sssd does not go into offline mode when using extrausers proxy
    ["/var/lib/extrausers/passwd", "/var/lib/extrausers/group"].each do |filename|
      if !File.exists?(filename)
        File.open(filename, "w") {|f| }
      end
    end

    # Laptops also want the NetworkManager configurations to be done before
    # it starts.  Should that be integrated here is an interesting question,
    # but right now the puavo-update-nm-configurations script loads fileutils
    # and json modules, which would needlessly slow down this script for other
    # host types that do not need this.
    system('puavo-update-nm-configurations')
  when "wirelessaccesspoint"
    # wirelessaccesspoints may be used as infotv devices depending on device
    # tags.
    write_config("/etc/ntp.conf")
    write_config("/etc/pam.d/gdm-autologin", "wirelessaccesspoint")

    # turn infotv displays on and off
    if @puavo_xsessions_default == 'puavo-infotv' then
      write_config("/etc/cron.d/infotv_display_control")
    end
end

if @puavo_autoeth_enabled
    wired_interfaces                                                 \
      = Dir.glob('/sys/class/net/eth*')                              \
           .select { |path| not File.exists?("#{ path }/phy80211") } \
           .map    { |path| File.basename(path) }

    File.open('/etc/network/interfaces.d/puavo-autoeth', 'w') do |file|
      wired_interfaces.each do |interface|
        file.write("\nauto #{ interface }\niface #{ interface } inet dhcp\n")
      end
    end
end

exit(0)
