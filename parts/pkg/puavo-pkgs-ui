#!/usr/bin/python3

import fcntl
import gi
import os
import signal
import subprocess
import sys

from enum import Enum

gi.require_version('Gtk', '3.0')
from gi.repository import GLib
from gi.repository import GObject
from gi.repository import Gtk

class PkgState(Enum):
    ABSENT          = 1
    INSTALLED       = 2
    INSTALL_ERROR   = 3
    INSTALLING      = 4
    INSTALL_SUCCESS = 5
    REMOVE_ERROR    = 6
    REMOVE_SUCCESS  = 7
    REMOVING        = 8


def _state_msg(msg, color=None):
    text = '<b>' + msg + '</b>'
    if color:
        text = '<span background="%s">%s</span>' % (color, text)
    return text


def _tr(msg):
    return msg


def error_message(parent, message, secondary_message):
    dialog = Gtk.MessageDialog(parent=parent,
                               flags=Gtk.DialogFlags.MODAL,
                               type=Gtk.MessageType.ERROR,
                               buttons=Gtk.ButtonsType.OK,
                               message_format=message)

    if secondary_message:
        dialog.format_secondary_markup(secondary_message)

    dialog.run()
    dialog.hide()


def send_puavomenu_command(socket_file, args):
    if os.path.exists(socket_file):
        # This instance is running, send the command
        subprocess.Popen(
            ['/opt/puavomenu/send_command', socket_file] + args,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL)


def update_puavomenu(package_id):
    """Sends a 'update-puavopkg' command to all running instances of
    puavomenu."""

    path = '/run/user/{0}'.format(os.getuid())
    args = ['update-puavopkg', package_id]

    # Try both production and development menus
    send_puavomenu_command(path + '/puavomenu', args)
    send_puavomenu_command(path + '/puavomenu_dev', args)


class PuavoPkg:
    def __init__(self, pkgname):
        self.action_button_conn   = None
        self.install_log          = []
        self.install_log_textview = None
        self.pkgname              = pkgname
        self.pkg_state            = None
        self.pkg_update_pid       = None


    def lookup_pkg_fields(self):
        self.description = self.field('description')
        self.legend      = self.field('legend')
        self.license     = self.license()

        self.description = self.description.replace('\n', ' ')


    def set_puavoconf(self, value):
        puavo_conf_key = 'puavo.pkg.%s' % self.pkgname

        cmd = [ 'sudo', '-n', '/usr/sbin/puavo-conf-local', puavo_conf_key,
                value ]
        subprocess.check_output(cmd).rstrip().decode('utf-8')


    def run_puavo_pkg_update(self):
        cmd = [ '/usr/bin/sudo', '-n',
                '/usr/sbin/puavo-pkg-update-from-gui',
                self.pkgname ]
        (pid, stdin, stdout, stderr) = GObject.spawn_async(cmd,
            flags=GLib.SPAWN_DO_NOT_REAP_CHILD|GLib.SPAWN_STDERR_TO_DEV_NULL,
            standard_input=True, standard_output=True)

        self.pkg_update_pid   = pid
        self.pkg_update_stdin = os.fdopen(stdin, 'w')

        fl = fcntl.fcntl(stdout, fcntl.F_GETFL)
        fcntl.fcntl(stdout, fcntl.F_SETFL, fl | os.O_NONBLOCK)
        GObject.io_add_watch(stdout, GObject.IO_HUP|GObject.IO_IN,
                             self.pkg_update_callback, os.fdopen(stdout))


    def install_pkg(self, widget):
        if self.pkg_update_pid:
            return

        self.set_ui_state(PkgState.INSTALLING)
        self.set_puavoconf('latest')
        self.run_puavo_pkg_update()


    def cancel_installation(self, widget):
        if self.pkg_update_stdin:
            print('quit', file=self.pkg_update_stdin, flush=True)


    def remove_pkg(self, widget):
        self.set_ui_state(PkgState.REMOVING)
        self.set_puavoconf('remove')
        self.run_puavo_pkg_update()


    def set_ui_state(self, new_state):
        if self.action_button_conn:
            self.action_button.disconnect(self.action_button_conn)
            self.action_button_conn = None

        self.action_button.set_sensitive( new_state != PkgState.REMOVING )
        self.pkg_state = new_state

        if new_state in [ PkgState.ABSENT, PkgState.REMOVE_SUCCESS ]:
            self.state_msg.set_markup(
              _state_msg('NOT INSTALLED', 'lightblue') )
            self.action_button.set_label( _tr('INSTALL') )
            self.action_button_conn \
              = self.action_button.connect('clicked', self.install_pkg)

        elif new_state == PkgState.INSTALLING:
            self.state_msg.set_markup( _state_msg('INSTALLING', 'yellow') )
            self.action_button.set_label( _tr('CANCEL') )
            self.action_button_conn \
              = self.action_button.connect('clicked', self.cancel_installation)
            self.spinner.start()

        elif new_state == PkgState.INSTALL_ERROR:
            self.state_msg.set_markup( _state_msg('ERROR', 'sandybrown') )
            self.action_button.set_label( _tr('INSTALL') )
            self.action_button_conn \
              = self.action_button.connect('clicked', self.install_pkg)

        elif new_state in [ PkgState.INSTALL_SUCCESS, PkgState.INSTALLED ]:
            self.state_msg.set_markup( _state_msg('INSTALLED', 'lightgreen') )
            self.action_button.set_label( _tr('REMOVE') )
            self.action_button_conn \
              = self.action_button.connect('clicked', self.remove_pkg)

        elif new_state == PkgState.REMOVING:
            self.state_msg.set_markup( _state_msg('REMOVING', 'orange') )
            self.spinner.start()

        elif new_state == PkgState.REMOVE_ERROR:
            self.state_msg.set_markup( _state_msg('ERROR', 'sandybrown') )
            self.action_button.set_label( _tr('INSTALL') )
            self.action_button_conn \
              = self.action_button.connect('clicked', self.install_pkg)


    def pkg_update_callback(self, fd, condition, channel):
        if condition & GObject.IO_IN:
            text = channel.read()
            self.install_log.append(text)
            if self.install_log_textview:
                self.install_log_textview.get_buffer().insert_at_cursor(text)

        if condition & GObject.IO_HUP:
            channel.close()

            (pid, status) = os.waitpid(self.pkg_update_pid, 0)

            if self.pkg_state == PkgState.REMOVING:
                if status == 0:
                    self.set_ui_state(PkgState.REMOVE_SUCCESS)
                    update_puavomenu(self.pkgname)
                else:
                    self.set_ui_state(PkgState.REMOVE_ERROR)
            else:
                if status == 0:
                    self.set_ui_state(PkgState.INSTALL_SUCCESS)
                    update_puavomenu(self.pkgname)
                else:
                    self.set_ui_state(PkgState.INSTALL_ERROR)

            self.spinner.stop()
            self.pkg_update_pid   = None
            self.pkg_update_stdin = None

            return False

        return True


    def add_to_grid(self, list_win, previous_pkg):
        # package may not be available, so skip those packages
        try:
            self.lookup_pkg_fields()
        except:
            return False

        # Row 1
        box_upper = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=50)
        box_upper.set_margin_top(5)
        box_upper.set_margin_bottom(5)

        self.package_name = Gtk.Label()
        self.package_name.set_markup('<b><big>' + self.legend + '</big></b>')
        self.package_name.set_margin_left(5)
        box_upper.pack_start(self.package_name, False, False, 0)

        # Note the reverse order of elements, we're using pack_end()
        self.action_button = Gtk.Button("Install")
        box_upper.pack_end(self.action_button, False, False, 0)

        self.toggle_log_button = Gtk.ToggleButton(label='show log')
        self.toggle_log_button.connect('clicked', self.show_or_hide_log)
        box_upper.pack_end(self.toggle_log_button, False, False, 0)

        self.spinner = Gtk.Spinner()
        box_upper.pack_end(self.spinner, False, False, 0)

        self.license_link = Gtk.Label()
        self.license_link.set_markup('<a href="%s">%s</a>' % (self.license, _tr('Show license')))
        box_upper.pack_end(self.license_link, False, False, 0)

        self.state_msg = Gtk.Label("State")
        box_upper.pack_end(self.state_msg, False, False, 0)

        # Row 2
        box_lower = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        box_lower.set_margin_bottom(25)

        self.package_description = Gtk.Label(self.description)
        self.package_description.set_line_wrap(True)
        self.package_description.set_alignment(0.0, 0.0)
        self.package_description.set_margin_left(25)
        self.package_description.set_margin_right(25)

        box_lower.pack_start(self.package_description, False, False, 0)

        # Item wrapper
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        vbox.pack_start(box_upper, True, True, 0)
        vbox.pack_start(box_lower, True, True, 0)

        row_container = Gtk.ListBoxRow()
        row_container.add(vbox)
        list_win.add(row_container)

        installed_link = os.path.join('/var/lib/puavo-pkg/installed',
                                      self.pkgname)
        if os.path.exists(installed_link):
            self.set_ui_state(PkgState.INSTALLED)
        else:
            self.set_ui_state(PkgState.ABSENT)

        return True


    def show_or_hide_log(self, widget):
        if widget.get_active():
            self.install_log_win = Gtk.Window()
            self.install_log_win.set_default_geometry(800, 220)
            self.install_log_win.set_title('puavo-pkgs-ui / %s'
                                             % self.pkgname)
            self.install_log_win.connect('destroy',
              lambda x: self.toggle_log_button.set_active(False))

            self.install_log_textview = Gtk.TextView()
            self.install_log_textview.connect('size-allocate', self.autoscroll)
            self.install_log_textview.set_border_width(10)
            self.install_log_textview.set_cursor_visible(False)
            self.install_log_textview.set_editable(False)
            self.install_log_textview.get_buffer() \
              .insert_at_cursor(''.join(self.install_log))

            self.scrolled_win = Gtk.ScrolledWindow()
            self.scrolled_win.add(self.install_log_textview)

            self.install_log_win.add(self.scrolled_win)
            self.install_log_win.show_all()

        elif self.install_log_win:
            self.install_log_win.destroy()
            self.install_log_win = None


    def autoscroll(self, *args):
        adj = self.scrolled_win.get_vadjustment()
        adj.set_value(adj.get_upper() - adj.get_page_size())


    def field(self, fieldname):
        path = '/var/lib/puavo-pkg/available/%s/%s' % (self.pkgname, fieldname)
        with open(path) as file:
            return file.read().rstrip()


    def license(self):
        path = '/var/lib/puavo-pkg/available/%s/license' % self.pkgname
        if not os.path.exists(path):
            raise ValueError('license not found')
        return 'file://%s' % path


def install_all_packages(widget, pkg_list):
    possible_to_install_states = [ PkgState.ABSENT,
                                   PkgState.INSTALL_ERROR,
                                   PkgState.REMOVE_ERROR,
                                   PkgState.REMOVE_SUCCESS ]
    for pkg in pkg_list:
        if pkg.pkg_state in possible_to_install_states:
            pkg.action_button.clicked()


def puavoconf_get(puavoconf_key):
    return subprocess.check_output([ 'puavo-conf', puavoconf_key ]).rstrip() \
                     .decode('utf-8')


pkg_list = []
for pkgname in puavoconf_get('puavo.pkgs.ui.pkglist').split():
    pkg_list.append( PuavoPkg(pkgname) )

win = Gtk.Window()
win.connect('destroy', Gtk.main_quit)
win.set_border_width(10)
win.set_default_geometry(780, 700)

box_outer = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
win.add(box_outer)

button = Gtk.Button(label=_tr('ACCEPT ALL LICENSES AND INSTALL ALL SOFTWARE'))
button.connect('clicked', lambda w: install_all_packages(w, pkg_list))
box_outer.pack_start(button, False, False, 0)

list_win = Gtk.ListBox()

scrolled_win = Gtk.ScrolledWindow()
scrolled_win.add(list_win)
box_outer.pack_start(scrolled_win, True, True, 0)

previous_pkg = None

for pkg in pkg_list:
    if pkg.add_to_grid(list_win, previous_pkg):
        previous_pkg = pkg

if not previous_pkg:
    error_message(win,
        _tr("No packages"),
        _tr('No packages have been listed for installation or removal.\n\n' \
            'Please check the contents of the <tt>puavo.pkgs.ui.pkglist</tt> ' \
            'puavo-conf setting.'))

    sys.exit(1)

win.show_all()

Gtk.main()
