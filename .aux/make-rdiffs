#!/usr/bin/rake -mf

require 'json'

image_dir  = ENV['image_dir']
rdiffs_dir = ENV['rdiffs_dir']

raise '"image_dir" environment variable not defined' \
  if image_dir.nil? || image_dir.empty?

raise '"rdiffs_dir" environment variable not defined' \
  if rdiffs_dir.nil? || rdiffs_dir.empty?

image_series_json_path = 'images.json'

def parse_image_series(json_path)
  image_series = JSON.parse( File.read(json_path) )

  raise 'expecting hash' unless image_series.kind_of?(Hash)
  image_series.each do |key, value|
    raise 'expecting string as key' unless key.kind_of?(String)
    raise 'expecting list as value' unless value.kind_of?(Array)
    value.each do |item|
      raise 'expecting string as list value' unless item.kind_of?(String)
    end
  end

  return image_series
end

def find_rdiff_file(source_image_file, target_image_file)
  return 'XXX.rdiff'
end

def run_or_fail(cmd, *args)
  cmd_string = ([cmd] + args).join(' ')
  system(cmd, *args)
  $?.success? or fail "command '#{cmd_string}' failed"
end

#
# main
#

begin
  image_series = parse_image_series(image_series_json_path)
rescue StandardError => err
  warn "Error in parsing #{ image_series_json_path }: #{ err.message }"
  exit 1
end

#
# tasks
#

task :default => :all_rdiffs

task :all_rdiffs

image_series.each do |series_name, image_list|
  task series_name
  task :all_rdiffs => series_name

  next if image_list.empty?

  image_list.each_index do |i|
    target_image_file = image_list[i]
    task series_name => target_image_file

    target_image_rdiff_target = "#{ target_image_file }-rdiffs"

    image_list.each_index do |j|
      # make rdiffs only to one direction (from earlier to later)
      next if i <= j

      source_image_file = image_list[j]

      rdiff_file = find_rdiff_file(source_image_file, target_image_file)

      source_image_signature_file = "#{ source_image_file }.rdiff_signature"

      file source_image_signature_file => source_image_file do |t|
	tmpfile = "#{ source_image_signature_file }.tmp"
	run_or_fail('rdiff', 'signature', source_image_file, tmpfile)
	mv(tmpfile, t.name)
      end

      rdiff_dependencies = [ source_image_signature_file, target_image_file ]
      file rdiff_file => rdiff_dependencies do |t|
	tmpfile = "#{ rdiff_file }.tmp"
	run_or_fail('rdiff', 'delta', source_image_signature_file,
	    target_image_file, tmpfile)
	mv(tmpfile, t.name)
      end

      task target_image_rdiff_target => rdiff_file
    end
  end

  task "latest-#{ series_name }" => image_list.last
end
